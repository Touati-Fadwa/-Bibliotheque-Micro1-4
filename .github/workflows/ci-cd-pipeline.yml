name: CI/CD avec qualit√©, d√©ploiement et rollback

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      sonarqube:
        image: sonarqube:community
        ports: [9000:9000]
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_FORCE_AUTHENTICATION: "false"
        options: >-
          --memory 4g
          --cpus 2
      k3s:
        image: rancher/k3s:latest
        ports:
          - 6443:6443

    steps:
      - name: üîß Installer jq
        run: sudo apt-get install -y jq

      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Installer les d√©pendances
        run: npm install

      - name: üß™ Ex√©cuter les tests
        run: |
          npm test -- --coverage
          mv coverage/lcov.info coverage/lcov-full.info

      - name: ‚öôÔ∏è Configurer SonarQube
        id: sonarqube-setup
        env:
          SONAR_HOST_URL: "http://localhost:9000"
          SONAR_ADMIN_PASSWORD: ${{ secrets.SONAR_ADMIN_PASSWORD || 'admin' }}
        run: |
          echo "‚è≥ Attente du d√©marrage de SonarQube..."
          until curl -sSf "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; do
            sleep 2
          done
          echo "‚úÖ SonarQube pr√™t"

          TOKEN=$(curl -u admin:"$SONAR_ADMIN_PASSWORD" -X POST \
            "$SONAR_HOST_URL/api/user_tokens/generate" \
            -d "name=CI_TOKEN" \
            -d "type=GLOBAL_ANALYSIS_TOKEN" | jq -r '.token')

          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV

          curl -u admin:"$SONAR_ADMIN_PASSWORD" -X POST \
            "$SONAR_HOST_URL/api/permissions/add_group" \
            -d "groupName=Anyone" \
            -d "permission=scan"

      - name: üîç Analyser avec SonarQube
        env:
          SONAR_HOST_URL: "http://localhost:9000"
        run: |
          npm install -g sonarqube-scanner --quiet
          sonar-scanner \
            -Dsonar.projectKey="BIBLIO_MAIN" \
            -Dsonar.projectName="Bibliotheque" \
            -Dsonar.host.url="$SONAR_HOST_URL" \
            -Dsonar.token="$SONAR_TOKEN" \
            -Dsonar.sources=src \
            -Dsonar.tests=tests \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov-full.info

      - name: üê≥ Construire l'image Docker
        run: docker build -t touatifadwa/bibliomicro1:latest .

      - name: ‚¨ÜÔ∏è Pousser l'image Docker
        env:
          DOCKER_USERNAME: touatifadwa
          DOCKER_PASSWORD: foufou53550880
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push touatifadwa/bibliomicro1:latest

      - name: üöÄ Installer et configurer k3s
        run: |
          curl -sfL https://get.k3s.io | \
            INSTALL_K3S_EXEC="--docker --disable=traefik --write-kubeconfig-mode 644" \
            sh -
          sudo cat /etc/rancher/k3s/k3s.yaml > kubeconfig
          chmod 644 kubeconfig
          echo "KUBECONFIG=${PWD}/kubeconfig" >> $GITHUB_ENV

      - name: ‚úÖ V√©rification rapide
        run: kubectl get nodes

      - name: üõ†Ô∏è D√©ployer
        run: kubectl apply -f k8s/

      - name: üîç V√©rifier le d√©ploiement
        run: |
          echo "üîç V√©rification du d√©ploiement 'bibliom1'..."
          kubectl get deploy bibliom1 -n bibliotheque

          echo "üîÅ V√©rification des ReplicaSets..."
          kubectl get rs -n bibliotheque -l app=biblio,tier=backend

          echo "‚è≥ Attente des pods..."
          sleep 50
          kubectl get pods -n bibliotheque -l app=biblio,tier=backend

          echo "üåê V√©rification du service 'biblio-service'..."
          kubectl get svc biblio-service -n bibliotheque

          echo "üìÑ Logs du premier pod..."
          POD=$(kubectl get pods -n bibliotheque -l app=biblio,tier=backend -o jsonpath="{.items[0].metadata.name}")
          kubectl logs -n bibliotheque "$POD" --tail=50

          echo "üìÖ √âv√©nements r√©cents..."
          kubectl get events -n bibliotheque --sort-by='.lastTimestamp'

      - name: üîÑ Rollback basique
        if: failure()
        run: |
            kubectl rollout undo deployment/bibliom1 -n bibliotheque || true
            exit 1

      - name: ‚úâÔ∏è D√©clencher l'email de notification GitHub
        if: failure()
        run: |
          echo "::warning::√âchec du workflow - Un email a √©t√© envoy√© par GitHub"


      - name: D√©marrer Prometheus et Grafana avec Docker Compose
        run: |
          docker compose -f docker-compose.yml up -d  # D√©marre Prometheus et Grafana

      - name: Wait for Grafana to be ready
        run: |
          echo "‚è≥ Attente que Grafana soit pr√™t sur http://localhost:3000..."
          for i in {1..20}; do
            if curl -s http://localhost:3000/login | grep -q "Grafana"; then
              echo "‚úÖ Grafana est pr√™t"
              break
            fi
            echo "Tentative $i : Grafana pas encore pr√™t. Attente de 5 secondes..."
            sleep 5
          done

         
      - name: Configurer Grafana pour se connecter √† Prometheus
        run: |
            curl -X POST \
              -H "Content-Type: application/json" \
              -u "admin:admin" \
              --data @grafana_datasource.json \
              http://localhost:3000/api/datasources
        
              
      - name: Importer le Dashboard Grafana
        run: |
                RESPONSE=$(curl -s -X POST \
                  -H "Content-Type: application/json" \
                  -u "admin:admin" \
                  --data @grafana_dashboard.json \
                  http://localhost:3000/api/dashboards/db)
            
                echo "üìä R√©ponse Grafana : $RESPONSE"
            


      - name: üîé V√©rifier que le dashboard a √©t√© import√©
        run: |
                DASHBOARD_TITLE="Node.js Application Dashboard"
                DASHBOARD_UID=$(curl -s -u admin:admin http://localhost:3000/api/search?query= | jq -r ".[] | select(.title==\"$DASHBOARD_TITLE\") | .uid")
      
                if [ -z "$DASHBOARD_UID" ]; then
                  echo "‚ùå Dashboard '$DASHBOARD_TITLE' non trouv√©"
                  exit 1
                fi
      
                echo "‚úÖ Dashboard '$DASHBOARD_TITLE' trouv√© avec UID: $DASHBOARD_UID"
      
      - name: üìä V√©rifier la pr√©sence de la m√©trique Prometheus dans le dashboard
        run: |
                DASHBOARD_UID=$(curl -s -u admin:admin http://localhost:3000/api/search?query= | jq -r '.[] | select(.title=="NodeJS Metrics") | .uid')
      
                METRIQUE="nodejs_app_http_requests_total"
                RESULT=$(curl -s -u admin:admin http://localhost:3000/api/dashboards/uid/$DASHBOARD_UID | jq -r '.. | objects | select(has("expr")) | .expr' | grep "$METRIQUE")
      
                if [ -z "$RESULT" ]; then
                  echo "‚ùå M√©trique '$METRIQUE' non trouv√©e dans le dashboard"
                  exit 1
                else
                  echo "‚úÖ M√©trique '$METRIQUE' trouv√©e dans le dashboard"
                fi
      
  

      - name: V√©rifier l'acc√®s √† Prometheus
        run: |
          curl -sSf http://localhost:9090/metrics  # V√©rifie si Prometheus r√©pond aux requ√™tes


      - name: V√©rifier l'acc√®s √† Grafana
        run: |
          curl -sSf -u "admin:admin" http://localhost:3000

name: CI/CD avec qualité, déploiement, rollback et monitoring

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SONAR_PROJECT_KEY: BIBLIO_MAIN
  SONAR_PROJECT_NAME: Bibliotheque
  SONAR_HOST_URL: http://localhost:9000
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GRAFANA_URL: http://localhost:3000
  PROMETHEUS_URL: http://localhost:9090
  DOCKER_IMAGE: touatifadwa/bibliomicro1:latest
  KUBECONFIG: ${{ github.workspace }}/kubeconfig

jobs:
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Build Docker image
        run: docker build -t $DOCKER_IMAGE .

      - name: Push Docker image
        env:
          DOCKER_USERNAME: touatifadwa
          DOCKER_PASSWORD: foufou53550880
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push $DOCKER_IMAGE

  quality:
    name: 🔍 Tests + Qualité (SonarQube)
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:community
        ports: [9000:9000]
        options: --health-cmd="curl http://localhost:9000/api/system/status | grep -q UP" --health-interval=10s --health-timeout=5s --health-retries=10
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_FORCE_AUTHENTICATION: "false"

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: |
          npm test -- --coverage
          mv coverage/lcov.info coverage/lcov-full.info

      - name: Install SonarQube Scanner
        run: npm install -g sonarqube-scanner

      - name: Analyse avec SonarQube
        env:
          SONAR_TOKEN: admin
        run: |
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.projectName=$SONAR_PROJECT_NAME \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.sources=src \
            -Dsonar.tests=tests \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov-full.info

  deploy:
    name: 🚀 Deploy to K3s
    needs: [build, quality]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install k3s
        run: |
          curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--docker" sh -
          sudo cat /etc/rancher/k3s/k3s.yaml > kubeconfig
          echo "KUBECONFIG=${PWD}/kubeconfig" >> $GITHUB_ENV

      - name: Apply Kubernetes Manifests
        run: kubectl apply -f k8s/

  rollback:
    name: 🔄 Rollback si échec
    if: failure()
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/bibliom1 -n bibliotheque || true

  monitoring:
    name: 📊 Monitoring
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Démarrer Prometheus et Grafana
        run: docker compose -f docker-compose.yml up -d

      - name: Configurer Grafana Datasource
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -u "admin:admin" \
            --data @grafana_datasource.json \
            http://localhost:3000/api/datasources

      - name: Importer dashboard Grafana
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -u "admin:admin" \
            --data @grafana_dashboard.json \
            http://localhost:3000/api/dashboards/db
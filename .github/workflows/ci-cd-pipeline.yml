name: CI/CD avec qualit√©, d√©ploiement, rollback et monitoring

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SONAR_HOST_URL: http://localhost:9000
  GRAFANA_URL: http://localhost:3000
  PROMETHEUS_URL: http://localhost:9090
  DOCKER_IMAGE: touatifadwa/bibliomicro1:latest
  KUBECONFIG: ${{ github.workspace }}/kubeconfig

jobs:
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Build Docker image
        run: docker build -t $DOCKER_IMAGE .

      - name: Push Docker image
        env:
          DOCKER_USERNAME: touatifadwa
          DOCKER_PASSWORD: foufou53550880
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push $DOCKER_IMAGE

  tests:
    name: üß™ Tests + Qualit√©
    runs-on: ubuntu-latest
    needs: build

    services:
      sonarqube:
        image: sonarqube:community
        ports: [9000:9000]
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_FORCE_AUTHENTICATION: "false"
          SONAR_WEB_JVM_OPTS: "-Djava.awt.headless=true"
          SONAR_ADMIN_PASSWORD: ${{ secrets.SONAR_ADMIN_PASSWORD || 'admin' }}

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Run tests and collect coverage
        run: |
          npm test -- --coverage
          mv coverage/lcov.info coverage/lcov-full.info

      - name: Wait for SonarQube to be ready and run scan
        run: |
          echo "‚è≥ Attente du d√©marrage de SonarQube..."
          until curl -sSf "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; do
            sleep 5
          done
          echo "‚úÖ SonarQube pr√™t"

          echo "üîê G√©n√©ration du token SonarQube..."
          TOKEN=$(curl -u admin:"$SONAR_ADMIN_PASSWORD" -X POST \
            "$SONAR_HOST_URL/api/user_tokens/generate" \
            -d "name=CI_TOKEN_$(date +%s)" \
            -d "type=GLOBAL_ANALYSIS_TOKEN" | jq -r '.token')

          echo "‚úÖ Token g√©n√©r√©"

          npm install -g sonarqube-scanner

          sonar-scanner \
            -Dsonar.projectKey="BIBLIO_MAIN" \
            -Dsonar.projectName="Bibliotheque" \
            -Dsonar.host.url="$SONAR_HOST_URL" \
            -Dsonar.token="$TOKEN" \
            -Dsonar.sources=src \
            -Dsonar.tests=tests \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov-full.info

  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: tests

    services:
      k3s:
        image: rancher/k3s:latest
        ports:
          - 6443:6443

    steps:
      - uses: actions/checkout@v4

      - name: Install k3s
        run: |
          curl -sfL https://get.k3s.io | \
            INSTALL_K3S_EXEC="--docker --disable=traefik --write-kubeconfig-mode 644" \
            sh -
          sudo cat /etc/rancher/k3s/k3s.yaml > kubeconfig
          chmod 644 kubeconfig
          echo "KUBECONFIG=${PWD}/kubeconfig" >> $GITHUB_ENV

      - name: Apply Kubernetes manifests
        run: kubectl apply -f k8s/

      - name: Verify deployment
        run: |
          sleep 30
          kubectl get pods -n bibliotheque
          kubectl get svc -n bibliotheque

  rollback:
    name: üîÑ Rollback if failure
    runs-on: ubuntu-latest
    if: failure()
    needs: deploy

    steps:
      - name: Rollback Kubernetes deployment
        run: |
          kubectl rollout undo deployment/bibliom1 -n bibliotheque || true

  monitoring:
    name: üìä Monitoring
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - uses: actions/checkout@v4

      - name: Launch Prometheus & Grafana
        run: docker compose -f docker-compose.yml up -d

      - name: Wait for Grafana to be ready
        run: |
          echo "‚è≥ Attente que Grafana soit pr√™t sur http://localhost:3000..."
          for i in {1..20}; do
            if curl -s http://localhost:3000/login | grep -q "Grafana"; then
              echo "‚úÖ Grafana est pr√™t"
              break
            fi
            echo "Tentative $i : Grafana pas encore pr√™t. Attente de 5 secondes..."
            sleep 5
          done

      - name: Configurer Grafana pour se connecter √† Prometheus
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -u "admin:admin" \
            --data @grafana_datasource.json \
            http://localhost:3000/api/datasources

      - name: Importer le Dashboard Grafana
        run: |
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -u "admin:admin" \
            --data @grafana_dashboard.json \
            http://localhost:3000/api/dashboards/db)
          echo "üìä R√©ponse Grafana : $RESPONSE"
          echo "‚è≥ Pause de 10 secondes pour laisser Grafana indexer le dashboard..."
          sleep 10

      - name: üîé V√©rifier que le dashboard a √©t√© import√©
        run: |
          DASHBOARD_TITLE="Node.js Application Dashboard"
          DASHBOARD_UID=$(curl -s -u admin:admin http://localhost:3000/api/search?query= | jq -r ".[] | select(.title==\"$DASHBOARD_TITLE\") | .uid")

          if [ -z "$DASHBOARD_UID" ]; then
            echo "‚ùå Dashboard '$DASHBOARD_TITLE' non trouv√©"
            exit 1
          fi

          echo "‚úÖ Dashboard '$DASHBOARD_TITLE' trouv√© avec UID: $DASHBOARD_UID"

      - name: üìä V√©rifier la pr√©sence de la m√©trique Prometheus dans le dashboard
        run: |
          DASHBOARD_TITLE="Node.js Application Dashboard"
          DASHBOARD_UID=$(curl -s -u admin:admin http://localhost:3000/api/search?query= | jq -r ".[] | select(.title==\"$DASHBOARD_TITLE\") | .uid")

          METRIQUE="nodejs_app_http_requests_total"

          if [ -z "$DASHBOARD_UID" ]; then
            echo "‚ùå Dashboard '$DASHBOARD_TITLE' non trouv√©"
            exit 1
          fi

          RESULT=$(curl -s -u admin:admin http://localhost:3000/api/dashboards/uid/$DASHBOARD_UID | jq -r '.. | objects | select(has("expr")) | .expr' | grep "$METRIQUE")

          if [ -z "$RESULT" ]; then
            echo "‚ùå M√©trique '$METRIQUE' non trouv√©e dans le dashboard"
            exit 1
          else
            echo "‚úÖ M√©trique '$METRIQUE' trouv√©e dans le dashboard"
          fi

      - name: V√©rifier l'acc√®s √† Prometheus
        run: curl -sSf http://localhost:9090/metrics

      - name: V√©rifier l'acc√®s √† Grafana
        run: curl -sSf -u "admin:admin" http://localhost:3000

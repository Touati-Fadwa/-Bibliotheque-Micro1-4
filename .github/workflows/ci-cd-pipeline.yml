#######################################################################
# CONFIGURATION DE BASE
#######################################################################

# Nom du pipeline (affich√© dans l'interface GitHub Actions)
name: CI/CD Pipeline

# D√©clencheurs d'ex√©cution :
# - √Ä chaque push sur la branche main
# - √Ä chaque pull request visant la branche main
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

#######################################################################
# D√âFINITION DU JOB PRINCIPAL
#######################################################################
jobs:
  build:
    # Environnement d'ex√©cution
    runs-on: ubuntu-latest  # Machine virtuelle Ubuntu
    timeout-minutes: 30     # Timeout global apr√®s 30 minutes

    ###################################################################
    # SERVICE SONARQUBE INT√âGR√â
    ###################################################################
    services:
      sonarqube:
        image: sonarqube:community  # Version Community officielle
        ports: [9000:9000]         # Exposition du port 9000
        env:
          # D√©sactive les v√©rifications ElasticSearch (utile pour CI)
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"  
        options: >-
          --health-interval 30s     # V√©rification sant√© toutes les 30s
          --health-timeout 10s      # Timeout des v√©rifications sant√©
          --health-retries 5        # Nombre de tentatives
          --memory 4g               # M√©moire allou√©e

    ###################################################################
    # √âTAPES DU PIPELINE
    ###################################################################
    steps:
      # ---------------------------------------------------------------
      # √âTAPE 1 : R√âCUP√âRATION DU CODE SOURCE
      # ---------------------------------------------------------------
      - name: üõéÔ∏è Checkout Code
        uses: actions/checkout@v4    # Action officielle GitHub
        with:
          fetch-depth: 0  # N√©cessaire pour l'analyse SonarQube compl√®te

      # ---------------------------------------------------------------
      # √âTAPE 2 : INSTALLATION DES D√âPENDANCES
      # ---------------------------------------------------------------
      - name: üì¶ Install Dependencies
        run: npm install  # Installe toutes les d√©pendances package.json

      # ---------------------------------------------------------------
      # √âTAPE 3 : EX√âCUTION DES TESTS AVEC COUVERTURE
      # ---------------------------------------------------------------
      - name: üß™ Run Tests with Coverage
        run: npm test -- --coverage  # G√©n√®re le rapport dans coverage/

      # ---------------------------------------------------------------
      # √âTAPE 4 : ANALYSE DE QUALIT√â AVEC SONARQUBE
      # ---------------------------------------------------------------
      - name: üîç SonarQube Analysis
        env:
          # Utilise le token secret ou 'admin' par d√©faut (pour tests locaux)
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN || 'admin' }}
          SONAR_HOST_URL: "http://localhost:9000"  # URL du service int√©gr√©
        run: |
          # Attente que SonarQube soit op√©rationnel
          until curl -sSf "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; do
            sleep 5
          done
          
          # Lancement de l'analyse avec le scanner SonarQube
          npx sonarqube-scanner \
            -Dsonar.projectKey=biblio-gatekeeper \  # Cl√© unique du projet
            -Dsonar.sources=src \                   # Dossier source √† analyser
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info  # Rapport de couverture

      # ---------------------------------------------------------------
      # √âTAPE 5 : CONSTRUCTION DE L'IMAGE DOCKER
      # ---------------------------------------------------------------
      - name: üê≥ Build Docker Image
        run: docker build -t touatifadwa/biblio-gatekeeper:latest .

      # ---------------------------------------------------------------
      # √âTAPE 6 : ENVOI DE L'IMAGE SUR DOCKER HUB (S√âCURIS√â)
      # ---------------------------------------------------------------
      - name: ‚¨ÜÔ∏è Push Docker Image
        env:
          # Utilisation de secrets GitHub pour les identifiants
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          # Connexion s√©curis√©e sans affichage du mot de passe
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push touatifadwa/biblio-gatekeeper:latest

      # ---------------------------------------------------------------
      # √âTAPE 7 : D√âPLOIEMENT KUBERNETES
      # ---------------------------------------------------------------
      - name: üöÄ Deploy to Kubernetes
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}  # Configuration kubeconfig
        run: |
          # Cr√©ation du fichier de configuration temporaire
          echo "$KUBE_CONFIG" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          
          # Application des configurations Kubernetes
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      # ---------------------------------------------------------------
      # √âTAPE 8 : V√âRIFICATION DE L'√âTAT DES PODS
      # ---------------------------------------------------------------
      - name: ‚úÖ Check Pod Status
        run: |
          # Attente que les pods soient pr√™ts (timeout 90s)
          kubectl wait --for=condition=ready pod -l app=biblio-gatekeeper --timeout=90s
          # Affichage de l'√©tat des pods
          kubectl get pods

      # ---------------------------------------------------------------
      # √âTAPE 9 : NOTIFICATION DE SUCC√àS
      # ---------------------------------------------------------------
      - name: üì® Send Notification
        if: success()  # S'ex√©cute seulement si tout est r√©ussi
        run: |
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=Deployment successful ‚úÖ - SonarQube report: http://localhost:9000/dashboard?id=biblio-gatekeeper"

      # ---------------------------------------------------------------
      # √âTAPE 10 : ROLLBACK AUTOMATIQUE EN CAS D'√âCHEC
      # ---------------------------------------------------------------
      - name: üîÑ Rollback on Failure
        if: failure()  # S'ex√©cute seulement en cas d'√©chec
        run: |
          # Annulation du d√©ploiement
          kubectl rollout undo deployment/biblio-gatekeeper
          # Notification d'√©chec
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=Deployment failed ‚ùå - Rollback initiated"
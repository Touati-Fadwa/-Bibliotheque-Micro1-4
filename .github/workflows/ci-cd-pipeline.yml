name: CI/CD Pipeline Compl√®te avec SonarQube

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      sonarqube:
        image: sonarqube:community
        ports: [9000:9000]
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_FORCE_AUTHENTICATION: "false"
        options: >-
          --memory 4g
          --cpus 2

    steps:
      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Installer les d√©pendances
        run: npm install

      - name: üß™ Ex√©cuter les tests
        run: |
          npm test -- --coverage
          mv coverage/lcov.info coverage/lcov-full.info

      - name: ‚öôÔ∏è Configurer SonarQube
        run: |
          echo "‚è≥ V√©rification de SonarQube..."
          until curl -sSf "$SONAR_HOST_URL/api/system/health" | grep -q '"health":"GREEN"'; do
            sleep 5
          done
          echo "‚úÖ SonarQube op√©rationnel"

          # Configuration des permissions
          curl -u admin:admin -X POST \
            "$SONAR_HOST_URL/api/permissions/add_group?groupName=Anyone&permission=scan"

      - name: üîç Analyser avec SonarQube
        env:
          GITHUB_REPO: ${{ github.repository }}
          SONAR_HOST_URL: "http://localhost:9000"
        run: |
          npm install -g sonarqube-scanner@latest
          
          PROJECT_KEY="${GITHUB_REPO//\//-}-${GITHUB_SHA:0:8}"
          PROJECT_NAME="${GITHUB_REPO#*/}"
          
          sonar-scanner \
            -Dsonar.projectKey="$PROJECT_KEY" \
            -Dsonar.projectName="$PROJECT_NAME" \
            -Dsonar.host.url="$SONAR_HOST_URL" \
            -Dsonar.sources=src \
            -Dsonar.tests=tests \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov-full.info \
            -Dsonar.scm.provider=git \
            -Dsonar.scm.disabled=false \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.working.directory=.scannerwork \
            -Dsonar.verbose=true

          echo "Rapport disponible √† : $SONAR_HOST_URL/dashboard?id=$PROJECT_KEY"

      - name: üê≥ Construire l'image Docker
        run: docker build -t touatifadwa/biblio-gatekeeper:latest .

      - name: ‚¨ÜÔ∏è Pousser l'image Docker
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push touatifadwa/biblio-gatekeeper:latest

      - name: üöÄ D√©ployer sur Kubernetes
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      - name: ‚úÖ V√©rifier l'√©tat des pods
        run: |
          kubectl wait --for=condition=ready pod -l app=biblio-gatekeeper --timeout=120s
          kubectl get pods -o wide

      - name: üì® Envoyer une notification
        if: success()
        run: |
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=D√©ploiement r√©ussi ‚úÖ - Rapport SonarQube: $SONAR_HOST_URL/dashboard?id=$PROJECT_KEY"

      - name: üîÑ Rollback en cas d'√©chec
        if: failure()
        run: |
          kubectl rollout undo deployment/biblio-gatekeeper
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=√âchec du d√©ploiement ‚ùå - Rollback initi√©"
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      sonarqube:
        image: sonarqube:community
        ports: [9000:9000]
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_FORCE_AUTHENTICATION: "false"
        options: >-
          --memory 4g
          --cpus 2
      k3s:
        image: rancher/k3s:latest
        ports:
          - 6443:6443
    steps:
      - name: üîß Installer jq pour le traitement JSON
        run: sudo apt-get install -y jq

      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Installer les d√©pendances
        run: npm install

      - name: üß™ Ex√©cuter les tests
        run: |
          npm test -- --coverage
          mv coverage/lcov.info coverage/lcov-full.info

      - name: ‚öôÔ∏è Configurer SonarQube
        id: sonarqube-setup
        env:
            SONAR_HOST_URL: "http://localhost:9000"
            SONAR_ADMIN_PASSWORD: ${{ secrets.SONAR_ADMIN_PASSWORD || 'admin' }}
        run: |
            echo "‚è≥ Attente du d√©marrage de SonarQube..."
            until curl -sSf "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; do
              sleep 2
            done
            echo "‚úÖ SonarQube pr√™t"
        
            # Cr√©er un token admin global (simplifi√©)
            TOKEN=$(curl -u admin:"$SONAR_ADMIN_PASSWORD" -X POST \
              "$SONAR_HOST_URL/api/user_tokens/generate" \
              -d "name=CI_TOKEN" \
              -d "type=GLOBAL_ANALYSIS_TOKEN" | jq -r '.token')
            
            echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV
        
            # Configurer les permissions de base
            curl -u admin:"$SONAR_ADMIN_PASSWORD" -X POST \
              "$SONAR_HOST_URL/api/permissions/add_group" \
              -d "groupName=Anyone" \
              -d "permission=scan"
        
      - name: üîç Analyser avec SonarQube
        env:
            SONAR_HOST_URL: "http://localhost:9000"
        run: |
                # Installation silencieuse
                npm install -g sonarqube-scanner --quiet
                
                # Commande d'analyse simplifi√©e (sans -q qui cause l'erreur)
                sonar-scanner \
                  -Dsonar.projectKey="BIBLIO_MAIN" \
                  -Dsonar.projectName="Bibliotheque" \
                  -Dsonar.host.url="$SONAR_HOST_URL" \
                  -Dsonar.token="$SONAR_TOKEN" \
                  -Dsonar.sources=src \
                  -Dsonar.tests=tests \
                  -Dsonar.javascript.lcov.reportPaths=coverage/lcov-full.info

      - name: üê≥ Construire l'image Docker
        run: docker build -t touatifadwa/biblio-gatekeeper:latest .

      - name: ‚¨ÜÔ∏è Pousser l'image Docker
        env:
          DOCKER_USERNAME: touatifadwa  
          DOCKER_PASSWORD: foufou53550880  
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push touatifadwa/biblio-gatekeeper:latest

      - name: üöÄ Installer et configurer k3s
        run: |
            # Installer k3s avec configuration explicite
            curl -sfL https://get.k3s.io | \
              INSTALL_K3S_EXEC="--write-kubeconfig-mode 644 --kube-apiserver-arg 'bind-address=0.0.0.0'" \
              K3S_KUBECONFIG_MODE="644" \
              sh -
        
            # Attendre que l'API soit disponible
            echo "‚è≥ Attente du d√©marrage de l'API k3s..."
            export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
            until kubectl cluster-info; do
              echo "En attente de l'API Kubernetes..."
              sleep 5
            done
        
            # Configurer l'acc√®s pour l'utilisateur courant
            sudo cp /etc/rancher/k3s/k3s.yaml kubeconfig.yaml
            sudo chown $USER:$USER kubeconfig.yaml
            sed -i 's/127.0.0.1/localhost/g' kubeconfig.yaml
            echo "KUBECONFIG=${PWD}/kubeconfig.yaml" >> $GITHUB_ENV
        
            # V√©rification finale
            kubectl config view
            kubectl get nodes
        
      - name: üõ†Ô∏è D√©ployer l'application
        run: |
            kubectl apply -f k8s/
            kubectl rollout status deployment/biblio-app --timeout=120s
            
            
      - name: ‚úÖ V√©rifier l'√©tat des pods
        run: |
          kubectl wait --for=condition=ready pod -l app=biblio-gatekeeper --timeout=120s
          kubectl get pods -o wide

      - name: üì® Envoyer une notification
        if: success()
        run: |
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=D√©ploiement r√©ussi ‚úÖ - Rapport SonarQube: $SONAR_HOST_URL/dashboard?id=$PROJECT_KEY"

      - name: üîÑ Rollback en cas d'√©chec
        if: failure()
        run: |
          kubectl rollout undo deployment/biblio-gatekeeper
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=√âchec du d√©ploiement ‚ùå - Rollback initi√©"                         
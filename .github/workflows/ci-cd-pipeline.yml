#######################################################################
# CONFIGURATION DE BASE
#######################################################################

name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

#######################################################################
# D√âFINITION DU JOB PRINCIPAL
#######################################################################
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    ###################################################################
    # SERVICE SONARQUBE INT√âGR√â (VERSION CORRIG√âE)
    ###################################################################
    services:
      sonarqube:
        image: sonarqube:community
        ports: [9000:9000]
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
        options: >-
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --memory 4g

    ###################################################################
    # √âTAPES DU PIPELINE
    ###################################################################
    steps:
      # ---------------------------------------------------------------
      # √âTAPE 1 : R√âCUP√âRATION DU CODE
      # ---------------------------------------------------------------
      - name: üõéÔ∏è Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------------------------------------------------------------
      # √âTAPE 2 : INSTALLATION DES D√âPENDANCES
      # ---------------------------------------------------------------
      - name: üì¶ Install Dependencies
        run: npm install

      # ---------------------------------------------------------------
      # √âTAPE 3 : TESTS AVEC COUVERTURE
      # ---------------------------------------------------------------
      - name: üß™ Run Tests with Coverage
        run: npm test -- --coverage

      # ---------------------------------------------------------------
      # √âTAPE 4 : ANALYSE SONARQUBE (VERSION OPTIMIS√âE)
      # ---------------------------------------------------------------
      - name: üîç SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN || 'admin' }}
          SONAR_HOST_URL: "http://sonarqube:9000"  # Note: utilisation du nom du service
        run: |
          # Attente que SonarQube soit pr√™t (version am√©lior√©e)
          for i in {1..12}; do
            if curl -sSf "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; then
              echo "SonarQube pr√™t apr√®s $((i*5)) secondes"
              break
            fi
            sleep 5
            if [ $i -eq 12 ]; then
              echo "::error::SonarQube n'a pas d√©marr√© dans le d√©lai imparti"
              exit 1
            fi
          done

          # Installation du scanner si absent
          if ! command -v sonar-scanner &> /dev/null; then
            npm install -g sonarqube-scanner
          fi

          # Analyse avec param√®tres optimis√©s
          sonar-scanner \
            -Dsonar.projectKey=biblio-gatekeeper \
            -Dsonar.projectName=BiblioGatekeeper \
            -Dsonar.sources=src \
            -Dsonar.tests=test \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.login=$SONAR_TOKEN

      # ---------------------------------------------------------------
      # √âTAPE 5 : BUILD DOCKER
      # ---------------------------------------------------------------
      - name: üê≥ Build Docker Image
        run: docker build -t touatifadwa/biblio-gatekeeper:latest .

      # ---------------------------------------------------------------
      # √âTAPE 6 : PUSH DOCKER HUB
      # ---------------------------------------------------------------
      - name: ‚¨ÜÔ∏è Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push touatifadwa/biblio-gatekeeper:latest

      # ---------------------------------------------------------------
      # √âTAPE 7 : D√âPLOIEMENT KUBERNETES
      # ---------------------------------------------------------------
      - name: üöÄ Deploy to Kubernetes
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      # ---------------------------------------------------------------
      # √âTAPE 8 : V√âRIFICATION PODS
      # ---------------------------------------------------------------
      - name: ‚úÖ Check Pod Status
        run: |
          kubectl wait --for=condition=ready pod -l app=biblio-gatekeeper --timeout=90s
          kubectl get pods

      # ---------------------------------------------------------------
      # √âTAPE 9 : NOTIFICATION
      # ---------------------------------------------------------------
      - name: üì® Send Notification
        if: success()
        run: |
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=Deployment successful ‚úÖ - SonarQube report: http://localhost:9000/dashboard?id=biblio-gatekeeper"

      # ---------------------------------------------------------------
      # √âTAPE 10 : ROLLBACK
      # ---------------------------------------------------------------
      - name: üîÑ Rollback on Failure
        if: failure()
        run: |
          kubectl rollout undo deployment/biblio-gatekeeper
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=Deployment failed ‚ùå - Rollback initiated"
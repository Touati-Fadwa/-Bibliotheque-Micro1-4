on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      sonarqube:
        image: sonarqube:community
        ports: [9000:9000]
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_FORCE_AUTHENTICATION: "false"
        options: >-
          --memory 4g
          --cpus 2
      k3s:
        image: rancher/k3s:latest
        ports:
          - 6443:6443
    steps:
      - name: üîß Installer jq pour le traitement JSON
        run: sudo apt-get install -y jq

      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Installer les d√©pendances
        run: npm install

      - name: üß™ Ex√©cuter les tests
        run: |
          npm test -- --coverage
          mv coverage/lcov.info coverage/lcov-full.info

      - name: ‚öôÔ∏è Configurer SonarQube
        id: sonarqube-setup
        env:
            SONAR_HOST_URL: "http://localhost:9000"
            SONAR_ADMIN_PASSWORD: ${{ secrets.SONAR_ADMIN_PASSWORD || 'admin' }}
        run: |
            echo "‚è≥ Attente du d√©marrage de SonarQube..."
            until curl -sSf "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; do
              sleep 2
            done
            echo "‚úÖ SonarQube pr√™t"
        
            # Cr√©er un token admin global (simplifi√©)
            TOKEN=$(curl -u admin:"$SONAR_ADMIN_PASSWORD" -X POST \
              "$SONAR_HOST_URL/api/user_tokens/generate" \
              -d "name=CI_TOKEN" \
              -d "type=GLOBAL_ANALYSIS_TOKEN" | jq -r '.token')
            
            echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV
        
            # Configurer les permissions de base
            curl -u admin:"$SONAR_ADMIN_PASSWORD" -X POST \
              "$SONAR_HOST_URL/api/permissions/add_group" \
              -d "groupName=Anyone" \
              -d "permission=scan"
        
      - name: üîç Analyser avec SonarQube
        env:
            SONAR_HOST_URL: "http://localhost:9000"
        run: |
                # Installation silencieuse
                npm install -g sonarqube-scanner --quiet
                
                # Commande d'analyse simplifi√©e (sans -q qui cause l'erreur)
                sonar-scanner \
                  -Dsonar.projectKey="BIBLIO_MAIN" \
                  -Dsonar.projectName="Bibliotheque" \
                  -Dsonar.host.url="$SONAR_HOST_URL" \
                  -Dsonar.token="$SONAR_TOKEN" \
                  -Dsonar.sources=src \
                  -Dsonar.tests=tests \
                  -Dsonar.javascript.lcov.reportPaths=coverage/lcov-full.info

      - name: üê≥ Construire l'image Docker
        run: docker build -t touatifadwa/bibliomicro1:latest .

      - name: ‚¨ÜÔ∏è Pousser l'image Docker
        env:
          DOCKER_USERNAME: touatifadwa  
          DOCKER_PASSWORD: foufou53550880  
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push touatifadwa/bibliomicro1:latest

      - name: üöÄ Installer et configurer k3s
        run: |
            # 1. Installer k3s avec les bonnes permissions
            curl -sfL https://get.k3s.io | \
              INSTALL_K3S_EXEC="--docker --disable=traefik --write-kubeconfig-mode 644" \
              sh -
        
            # 2. Configurer l'acc√®s (version simplifi√©e)
            sudo cat /etc/rancher/k3s/k3s.yaml > kubeconfig
            chmod 644 kubeconfig
            echo "KUBECONFIG=${PWD}/kubeconfig" >> $GITHUB_ENV
        
      - name: ‚úÖ V√©rification rapide
        run: kubectl get nodes
        
      - name: üõ†Ô∏è D√©ployer
        run: |
          # 1. Appliquer la configuration
          kubectl apply -f k8s/
             
      - name: üîç V√©rification approfondie des pods
        run: |
            echo "1. √âtat global des pods :"
            kubectl get pods -n bibliotheque -l app=biblio -o wide
            
            echo -e "\n2. D√©tails des pods non ready :"
            kubectl get pods -n bibliotheque -l app=biblio --no-headers | grep -v "Running" | while read pod status _; do
              echo -e "\n=== D√©tails du pod $pod (Status: $status) ==="
              kubectl describe pod -n bibliotheque $pod | grep -A 10 "Events:"
            done
            
            echo -e "\n3. V√©rification des endpoints :"
            kubectl get endpoints -n bibliotheque biblio-service -o yaml | grep -A 5 subsets:
            
            echo -e "\n4. Logs des containers :"
            kubectl get pods -n bibliotheque -l app=biblio --no-headers | awk '{print $1}' | while read pod; do
              echo -e "\nLogs de $pod :"
              kubectl logs -n bibliotheque $pod --tail=20 --timestamps
            done
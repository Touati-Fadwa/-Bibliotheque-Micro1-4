name: CI/CD Pipeline avec SonarQube

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-assurance:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Augment√© pour laisser le temps √† SonarQube de d√©marrer

    services:
      sonarqube:
        image: sonarqube:community
        ports: [9000:9000]
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
        options: --memory 4g --cpus 2

    steps:
      # √âtape 1: Checkout du code
      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # √âtape 2: Installation des d√©pendances
      - name: üì¶ Installer les d√©pendances
        run: npm install

      # √âtape 3: Ex√©cution des tests avec couverture
      - name: üß™ Ex√©cuter les tests
        run: npm test -- --coverage

      # √âtape 4: Configuration et analyse SonarQube
      - name: üîç Analyse SonarQube
        env:
          SONAR_HOST_URL: "http://sonarqube:9000"
        run: |
          # Attente intelligente du d√©marrage de SonarQube
          echo "En attente du d√©marrage de SonarQube..."
          for i in {1..18}; do
            if curl -sSf "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; then
              echo "SonarQube pr√™t apr√®s $((i*5)) secondes"
              break
            fi
            sleep 5
            if [ $i -eq 18 ]; then
              echo "::error::√âchec du d√©marrage de SonarQube apr√®s 90 secondes"
              exit 1
            fi
          done

          # Installation du scanner si n√©cessaire
          if ! command -v sonar-scanner &> /dev/null; then
            npm install -g sonarqube-scanner
          fi

          # Analyse du code
          sonar-scanner \
            -Dsonar.projectKey=biblio-gatekeeper \
            -Dsonar.projectName=BiblioGatekeeper \
            -Dsonar.sources=src \
            -Dsonar.tests=test \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.login=admin

      # √âtape 5: Build Docker
      - name: üê≥ Construire l'image Docker
        run: docker build -t touatifadwa/biblio-gatekeeper:latest .

      # √âtape 6: Push vers Docker Hub
      - name: ‚¨ÜÔ∏è Pousser l'image Docker
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push touatifadwa/biblio-gatekeeper:latest

      # √âtape 7: D√©ploiement Kubernetes
      - name: üöÄ D√©ployer sur Kubernetes
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      # √âtape 8: V√©rification des pods
      - name: ‚úÖ V√©rifier l'√©tat des pods
        run: |
          kubectl wait --for=condition=ready pod -l app=biblio-gatekeeper --timeout=120s
          kubectl get pods -o wide

      # √âtape 9: Notification
      - name: üì® Envoyer une notification
        if: success()
        run: |
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=D√©ploiement r√©ussi ‚úÖ - Rapport SonarQube: http://sonarqube:9000/dashboard?id=biblio-gatekeeper"

      # √âtape 10: Rollback automatique
      - name: üîÑ Rollback en cas d'√©chec
        if: failure()
        run: |
          kubectl rollout undo deployment/biblio-gatekeeper
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=√âchec du d√©ploiement ‚ùå - Rollback initi√©"
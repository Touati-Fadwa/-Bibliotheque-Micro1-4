name: CI/CD avec qualit√©, d√©ploiement, rollback et monitoring

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SONAR_HOST_URL: http://localhost:9000
  GRAFANA_URL: http://localhost:3000
  PROMETHEUS_URL: http://localhost:9090
  DOCKER_IMAGE: touatifadwa/bibliomicro1:latest
  KUBECONFIG: ${{ github.workspace }}/kubeconfig

jobs:
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Build Docker image
        run: docker build -t $DOCKER_IMAGE .

      - name: Push Docker image
        env:
          DOCKER_USERNAME: touatifadwa
          DOCKER_PASSWORD: foufou53550880
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push $DOCKER_IMAGE

  tests:
    name: üß™ Tests + Qualit√©
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      sonarqube:
        image: sonarqube:community
        ports: [9000:9000]
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_FORCE_AUTHENTICATION: "false"
        options: >-
          --memory 4g
          --cpus 2

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install
          npm install -g sonarqube-scanner

      - name: Run tests and collect coverage
        run: |
          npm test -- --coverage
          mv coverage/lcov.info coverage/lcov-full.info

      - name: ‚öôÔ∏è Configurer SonarQube
        id: sonarqube-setup
        env:
          SONAR_HOST_URL: "http://localhost:9000"
          SONAR_ADMIN_PASSWORD: ${{ secrets.SONAR_ADMIN_PASSWORD || 'admin' }}
        run: |
          echo "‚è≥ Attente du d√©marrage de SonarQube..."
          until curl -sSf "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; do
            sleep 2
          done
          echo "‚úÖ SonarQube pr√™t"

          TOKEN=$(curl -u admin:"$SONAR_ADMIN_PASSWORD" -X POST \
            "$SONAR_HOST_URL/api/user_tokens/generate" \
            -d "name=CI_TOKEN" \
            -d "type=GLOBAL_ANALYSIS_TOKEN" | jq -r '.token')

          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV

          curl -u admin:"$SONAR_ADMIN_PASSWORD" -X POST \
            "$SONAR_HOST_URL/api/permissions/add_group" \
            -d "groupName=Anyone" \
            -d "permission=scan"

      - name: üîç Analyser avec SonarQube
        env:
          SONAR_HOST_URL: "http://localhost:9000"
        run: |
          npm install -g sonarqube-scanner --quiet
          sonar-scanner \
            -Dsonar.projectKey="BIBLIO_MAIN" \
            -Dsonar.projectName="Bibliotheque" \
            -Dsonar.host.url="$SONAR_HOST_URL" \
            -Dsonar.token="$SONAR_TOKEN" \
            -Dsonar.sources=src \
            -Dsonar.tests=tests \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov-full.info
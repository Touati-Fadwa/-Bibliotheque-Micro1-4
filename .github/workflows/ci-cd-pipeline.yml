on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      sonarqube:
        image: sonarqube:community
        ports: [9000:9000]
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_FORCE_AUTHENTICATION: "false"
        options: >-
          --memory 4g
          --cpus 2

    steps:
      - name: üîß Installer jq pour le traitement JSON
        run: sudo apt-get install -y jq

      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Installer les d√©pendances
        run: npm install

      - name: üß™ Ex√©cuter les tests
        run: |
          npm test -- --coverage
          mv coverage/lcov.info coverage/lcov-full.info

      - name: ‚öôÔ∏è Configurer SonarQube
        id: sonarqube-setup
        env:
            SONAR_HOST_URL: "http://localhost:9000"
            SONAR_ADMIN_PASSWORD: ${{ secrets.SONAR_ADMIN_PASSWORD || 'admin' }}
        run: |
            echo "‚è≥ Attente du d√©marrage de SonarQube..."
            until curl -sSf "$SONAR_HOST_URL/api/system/health" | grep -q '"health":"GREEN"'; do
              sleep 5
            done
            echo "‚úÖ SonarQube op√©rationnel"
        
            # Cr√©er un token GLOBAL (essentiel pour le provisionnement JRE)
            GLOBAL_TOKEN_RESPONSE=$(curl -u admin:"$SONAR_ADMIN_PASSWORD" -X POST \
              "$SONAR_HOST_URL/api/user_tokens/generate" \
              -d "name=GLOBAL_CI_TOKEN" \
              -d "type=GLOBAL_ANALYSIS_TOKEN")
            
            echo "SONAR_GLOBAL_TOKEN=$(echo $GLOBAL_TOKEN_RESPONSE | jq -r '.token')" >> $GITHUB_ENV
        
            # Cr√©er aussi un token projet (pour l'analyse)
            PROJECT_TOKEN_RESPONSE=$(curl -u admin:"$SONAR_ADMIN_PASSWORD" -X POST \
              "$SONAR_HOST_URL/api/user_tokens/generate" \
              -d "name=PROJECT_CI_TOKEN" \
              -d "type=PROJECT_ANALYSIS_TOKEN" \
              -d "projectKey=BIBLIO_MAIN")
            
            echo "SONAR_PROJECT_TOKEN=$(echo $PROJECT_TOKEN_RESPONSE | jq -r '.token')" >> $GITHUB_ENV
        
            # Configurer les permissions
            curl -u admin:"$SONAR_ADMIN_PASSWORD" -X POST \
              "$SONAR_HOST_URL/api/permissions/add_group" \
              -d "groupName=Anyone" \
              -d "permission=scan" \
              -d "permission=provisioning"
        
      - name: üîç Analyser avec SonarQube
        env:
            SONAR_HOST_URL: "http://localhost:9000"
        run: |
            npm install -g sonarqube-scanner
            
            # Utiliser le token GLOBAL pour le provisionnement JRE
            export SONAR_SCANNER_OPTS="-Dsonar.token=$SONAR_GLOBAL_TOKEN"
            
            sonar-scanner \
              -Dsonar.projectKey="BIBLIO_MAIN" \
              -Dsonar.projectName="Bibliotheque" \
              -Dsonar.host.url="$SONAR_HOST_URL" \
              -Dsonar.login="$SONAR_PROJECT_TOKEN" \
              -Dsonar.sources=src \
              -Dsonar.tests=tests \
              -Dsonar.javascript.lcov.reportPaths=coverage/lcov-full.info \
              -Dsonar.sourceEncoding=UTF-8 \
              -Dsonar.working.directory=.scannerwork \
              -Dsonar.scm.disabled=true

      - name: üê≥ Construire l'image Docker
        run: docker build -t touatifadwa/biblio-gatekeeper:latest .

      - name: ‚¨ÜÔ∏è Pousser l'image Docker
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push touatifadwa/biblio-gatekeeper:latest

      - name: üöÄ D√©ployer sur Kubernetes
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      - name: ‚úÖ V√©rifier l'√©tat des pods
        run: |
          kubectl wait --for=condition=ready pod -l app=biblio-gatekeeper --timeout=120s
          kubectl get pods -o wide

      - name: üì® Envoyer une notification
        if: success()
        run: |
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=D√©ploiement r√©ussi ‚úÖ - Rapport SonarQube: $SONAR_HOST_URL/dashboard?id=$PROJECT_KEY"

      - name: üîÑ Rollback en cas d'√©chec
        if: failure()
        run: |
          kubectl rollout undo deployment/biblio-gatekeeper
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=√âchec du d√©ploiement ‚ùå - Rollback initi√©"
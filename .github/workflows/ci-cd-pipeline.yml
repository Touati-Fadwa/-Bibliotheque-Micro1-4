name: CI/CD Pipeline Complète avec SonarQube

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      sonarqube:
        image: sonarqube:community
        ports: [9000:9000]
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_FORCE_AUTHENTICATION: "false"
        options: >-
          --memory 4g
          --cpus 2

    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Installer les dépendances
        run: npm install

      - name: 🧪 Exécuter les tests
        run: npm test -- --coverage

      - name: 🔍 Préparation SonarQube
        id: sonarqube-setup
        env:
          SONAR_HOST_URL: "http://localhost:9000"
        run: |
          # Attente optimisée
          echo "⏳ Vérification de SonarQube..."
          for i in {1..30}; do
            if curl -sSf "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; then
              echo "✅ SonarQube prêt après $((i*2)) secondes"
              
              # Création token si nécessaire
              if [[ -z "${{ secrets.SONAR_TOKEN }}" ]]; then
                echo "::warning::Création d'un token temporaire"
                SONAR_TOKEN=$(curl -sS -u admin:admin -X POST \
                  "$SONAR_HOST_URL/api/user_tokens/generate" \
                  -d "name=github-action-$(date +%s)" \
                  | jq -r '.token')
                echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
                echo "::add-mask::$SONAR_TOKEN"
              fi
              exit 0
            fi
            sleep 2
          done
          echo "::error::Échec du démarrage SonarQube"
          exit 1

      - name: 🔎 Analyse SonarQube
        env:
          SONAR_HOST_URL: "http://localhost:9000"
          SONAR_TOKEN: ${{ env.SONAR_TOKEN || secrets.SONAR_TOKEN }}
        run: |
          # Installation du scanner
          npm install -g sonarqube-scanner
          
          # Vérification de l'existence des dossiers
          echo "📂 Structure du projet:"
          ls -la
          
          # Paramètres dynamiques
          SONAR_PARAMS=(
            "-Dsonar.projectKey=biblio-gatekeeper"
            "-Dsonar.projectName=BiblioGatekeeper"
            "-Dsonar.host.url=$SONAR_HOST_URL"
            "-Dsonar.token=$SONAR_TOKEN"
            "-Dsonar.sources=src"
            "-Dsonar.javascript.lcov.reportPaths=coverage/lcov.info"
          )
          
          # Ajout conditionnel des tests
          if [ -d "test" ]; then
            SONAR_PARAMS+=("-Dsonar.tests=test")
          else
            echo "::warning::Dossier 'test' non trouvé - analyse sans tests"
          fi
          
          # Exécution de l'analyse
          echo "🔧 Paramètres d'analyse:"
          echo "${SONAR_PARAMS[@]}"
          sonar-scanner "${SONAR_PARAMS[@]}"

      - name: 🐳 Build Docker Image
        run: docker build -t touatifadwa/biblio-gatekeeper:latest .

      - name: ⬆️ Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push touatifadwa/biblio-gatekeeper:latest

      - name: 🚀 Deploy to Kubernetes
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      - name: ✅ Check Pod Status
        run: |
          kubectl wait --for=condition=ready pod -l app=biblio-gatekeeper --timeout=120s
          kubectl get pods -o wide

      - name: 📨 Send Notification
        if: success()
        run: |
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=Déploiement réussi ✅"

      - name: 🔄 Rollback on Failure
        if: failure()
        run: |
          kubectl rollout undo deployment/biblio-gatekeeper
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=Échec du déploiement ❌"
name: CI/CD Pipeline Compl√®te avec SonarQube

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Temps augment√© pour SonarQube

    services:
      sonarqube:
        image: sonarqube:community
        ports: [9000:9000]
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_FORCE_AUTHENTICATION: "false"  # D√©sactive l'authentification obligatoire
        options: >-
          --memory 4g
          --cpus 2

    steps:
      # √âtape 1: R√©cup√©ration du code
      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # N√©cessaire pour SonarQube

      # √âtape 2: Installation des d√©pendances
      - name: üì¶ Installer les d√©pendances
        run: npm install

      # √âtape 3: Ex√©cution des tests avec couverture
      - name: üß™ Ex√©cuter les tests
        run: npm test -- --coverage

      # √âtape 4: Configuration SonarQube
      - name: ‚öôÔ∏è Configurer SonarQube
        id: sonarqube-setup
        env:
          SONAR_HOST_URL: "http://localhost:9000"
        run: |
          # Attente optimis√©e du d√©marrage
          echo "‚è≥ Attente du d√©marrage de SonarQube..."
          for i in {1..30}; do
            if curl -sSf "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; then
              echo "‚úÖ SonarQube pr√™t apr√®s $((i*2)) secondes"
              
              # D√©sactivation compl√®te de l'authentification si n√©cessaire
              curl -sS -u admin:admin -X POST \
                "$SONAR_HOST_URL/api/settings/set?key=sonar.forceAuthentication&value=false"
              exit 0
            fi
            sleep 2
          done
          echo "::error::√âchec du d√©marrage de SonarQube"
          exit 1

      # √âtape 5: Analyse SonarQube (version corrig√©e)
      - name: üîç Analyser avec SonarQube
        env:
          SONAR_HOST_URL: "http://localhost:9000"
        run: |
          # Installation garantie du scanner
          npm install -g sonarqube-scanner
          
          # Param√®tres dynamiques
          SONAR_PARAMS=(
            "-Dsonar.projectKey=biblio-gatekeeper"
            "-Dsonar.projectName=BiblioGatekeeper"
            "-Dsonar.host.url=$SONAR_HOST_URL"
            "-Dsonar.sources=src"
            "-Dsonar.javascript.lcov.reportPaths=coverage/lcov.info"
            "-Dsonar.scm.disabled=true"  # D√©sactive l'analyse SCM
          )
          
          # Ajout conditionnel de l'authentification
          if [[ -n "${{ secrets.SONAR_TOKEN }}" ]]; then
            SONAR_PARAMS+=("-Dsonar.token=${{ secrets.SONAR_TOKEN }}")
            echo "‚ÑπÔ∏è Utilisation du token configur√©"
          else
            echo "::warning::Analyse sans authentification"
          fi
          
          # Ex√©cution de l'analyse
          sonar-scanner "${SONAR_PARAMS[@]}"

      # √âtape 6: Construction de l'image Docker
      - name: üê≥ Construire l'image Docker
        run: docker build -t touatifadwa/biblio-gatekeeper:latest .

      # √âtape 7: Push vers Docker Hub (version s√©curis√©e)
      - name: ‚¨ÜÔ∏è Pousser l'image Docker
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push touatifadwa/biblio-gatekeeper:latest

      # √âtape 8: D√©ploiement Kubernetes
      - name: üöÄ D√©ployer sur Kubernetes
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      # √âtape 9: V√©rification des pods
      - name: ‚úÖ V√©rifier l'√©tat des pods
        run: |
          kubectl wait --for=condition=ready pod -l app=biblio-gatekeeper --timeout=120s
          kubectl get pods -o wide

      # √âtape 10: Notification de succ√®s
      - name: üì® Envoyer une notification
        if: success()
        run: |
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=D√©ploiement r√©ussi ‚úÖ - Rapport SonarQube: http://localhost:9000/dashboard?id=biblio-gatekeeper"

      # √âtape 11: Rollback automatique
      - name: üîÑ Rollback en cas d'√©chec
        if: failure()
        run: |
          kubectl rollout undo deployment/biblio-gatekeeper
          curl -X POST "https://gotify.example.com/message?token=${{ secrets.GOTIFY_TOKEN }}" \
            -d "title=CI/CD Status" \
            -d "message=√âchec du d√©ploiement ‚ùå - Rollback initi√©"
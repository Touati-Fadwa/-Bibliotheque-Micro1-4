name: CI/CD avec qualité, déploiement et rollback

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      sonarqube:
        image: sonarqube:community
        ports: [9000:9000]
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_FORCE_AUTHENTICATION: "false"
        options: >-
          --memory 4g
          --cpus 2
      k3s:
        image: rancher/k3s:latest
        ports:
          - 6443:6443

    steps:
      - name: 🔧 Installer jq
        run: sudo apt-get install -y jq

      - name: 🛎️ Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Installer les dépendances
        run: npm install

      - name: 🧪 Exécuter les tests
        run: |
          npm test -- --coverage
          mv coverage/lcov.info coverage/lcov-full.info

      - name: ⚙️ Configurer SonarQube
        id: sonarqube-setup
        env:
          SONAR_HOST_URL: "http://localhost:9000"
          SONAR_ADMIN_PASSWORD: ${{ secrets.SONAR_ADMIN_PASSWORD || 'admin' }}
        run: |
          echo "⏳ Attente du démarrage de SonarQube..."
          until curl -sSf "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; do
            sleep 2
          done
          echo "✅ SonarQube prêt"

          TOKEN=$(curl -u admin:"$SONAR_ADMIN_PASSWORD" -X POST \
            "$SONAR_HOST_URL/api/user_tokens/generate" \
            -d "name=CI_TOKEN" \
            -d "type=GLOBAL_ANALYSIS_TOKEN" | jq -r '.token')

          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV

          curl -u admin:"$SONAR_ADMIN_PASSWORD" -X POST \
            "$SONAR_HOST_URL/api/permissions/add_group" \
            -d "groupName=Anyone" \
            -d "permission=scan"

      - name: 🔍 Analyser avec SonarQube
        env:
          SONAR_HOST_URL: "http://localhost:9000"
        run: |
          npm install -g sonarqube-scanner --quiet
          sonar-scanner \
            -Dsonar.projectKey="BIBLIO_MAIN" \
            -Dsonar.projectName="Bibliotheque" \
            -Dsonar.host.url="$SONAR_HOST_URL" \
            -Dsonar.token="$SONAR_TOKEN" \
            -Dsonar.sources=src \
            -Dsonar.tests=tests \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov-full.info

      - name: 🐳 Construire l'image Docker
        run: docker build -t touatifadwa/bibliomicro1:latest .

      - name: ⬆️ Pousser l'image Docker
        env:
          DOCKER_USERNAME: touatifadwa
          DOCKER_PASSWORD: foufou53550880
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push touatifadwa/bibliomicro1:latest

      - name: 🚀 Installer et configurer k3s
        run: |
          curl -sfL https://get.k3s.io | \
            INSTALL_K3S_EXEC="--docker --disable=traefik --write-kubeconfig-mode 644" \
            sh -
          sudo cat /etc/rancher/k3s/k3s.yaml > kubeconfig
          chmod 644 kubeconfig
          echo "KUBECONFIG=${PWD}/kubeconfig" >> $GITHUB_ENV

      - name: ✅ Vérification rapide
        run: kubectl get nodes

      - name: 🛠️ Déployer
        run: kubectl apply -f k8s/

      - name: 🔍 Vérifier le déploiement
        run: |
          echo "🔍 Vérification du déploiement 'bibliom1'..."
          kubectl get deploy bibliom1 -n bibliotheque

          echo "🔁 Vérification des ReplicaSets..."
          kubectl get rs -n bibliotheque -l app=biblio,tier=backend

          echo "⏳ Attente des pods..."
          sleep 50
          kubectl get pods -n bibliotheque -l app=biblio,tier=backend

          echo "🌐 Vérification du service 'biblio-service'..."
          kubectl get svc biblio-service -n bibliotheque

          echo "📄 Logs du premier pod..."
          POD=$(kubectl get pods -n bibliotheque -l app=biblio,tier=backend -o jsonpath="{.items[0].metadata.name}")
          kubectl logs -n bibliotheque "$POD" --tail=50

          echo "📅 Événements récents..."
          kubectl get events -n bibliotheque --sort-by='.lastTimestamp'

  
    
          - name: 🔄 Rollback basique
          if: failure()
          run: |
            kubectl rollout undo deployment/bibliom1 -n bibliotheque || true
            exit 1

      - name: 📧 Envoyer un email en cas d’échec
        env:
          MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
          MAILGUN_DOMAIN: ${{ secrets.MAILGUN_DOMAIN }}
        run: |
          curl -s --user "api:$MAILGUN_API_KEY" \
            https://api.mailgun.net/v3/$MAILGUN_DOMAIN/messages \
            -F from="CI/CD <ci@$MAILGUN_DOMAIN>" \
            -F to=fadwatouati58@gmail.com \
            -F subject="❌ Échec du déploiement + rollback effectué" \
            -F text="Le pipeline CI/CD a échoué et un rollback automatique a été appliqué. Vérifiez vos logs GitHub Actions."

      
